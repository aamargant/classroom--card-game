{"version":3,"sources":["www/ducks/view/setView.ts","www/ducks/view/getView.ts","www/ducks/view/ViewDuck.ts","www/ducks/view/configureInjector.ts","www/ducks/ReduxReducer.ts","www/ducks/ReduxStore.ts","www/ducks/loading/decrementLoading.ts","www/ducks/loading/incrementLoading.ts","www/ducks/loading/isLoading.ts","www/ducks/loading/LoadingDuck.ts","www/ducks/loading/configureInjector.ts","www/ApiRest.ts","www/ducks/ReduxAfterAction.ts","www/ducks/cards/index.ts","www/ducks/game/index.ts","www/ducks/game/replaceGame.ts","www/ducks/currentUser/getCurrentUser.ts","www/ducks/currentUser/replaceCurrentUser.ts","www/ducks/currentUser/CurrentUserDuck.ts","www/ducks/currentUser/configureInjector.ts","www/ducks/game/enterGame.ts","www/ducks/game/getGameName.ts","www/ducks/selectedCard/deselectCard.ts","www/ducks/blog/replaceCurrentPost.ts","www/ducks/blog/replacePostList.ts","www/ducks/selectedCard/index.ts","www/ducks/blog/index.js","www/ducks/newGame/newGame.ts","www/ducks/newGame/NewGameDuck.ts","www/ducks/newGame/configureInjector.ts","www/ducks/game/readyGame.ts","www/ducks/game/refreshGame.ts","www/ducks/cards/playCardIntoPile.ts","www/ducks/cards/replaceCards.ts","www/ducks/selectedCard/getSelectedCard.ts","www/ducks/selectedCard/playSelectedCard.ts","www/ducks/selectedCard/selectCard.ts","www/ducks/game/getGameRound.ts","www/ducks/game/listPlayers.ts","www/ducks/cards/listPileCards.ts","www/ducks/cards/listSquareCards.ts","www/ducks/cards/listPlays.ts","www/ducks/blog/getCurrentPost.ts","www/ducks/blog/getPostList.ts","www/ducks/game/GameDuck.ts","www/ducks/game/EnterGameDuck.ts","www/ducks/game/ReadyGameDuck.ts","www/ducks/game/RefreshGameDuck.ts","www/ducks/game/ReplaceGameDuck.ts","www/ducks/game/configureInjector.ts","www/ducks/selectedCard/SelectedCardDuck.ts","www/ducks/selectedCard/PlaySelectedCardDuck.ts","www/ducks/selectedCard/configureInjector.ts","www/ducks/blog/BlogDuck.ts","www/ducks/blog/BlogSetViewDuck.ts","www/ducks/blog/configureInjector.ts","www/ducks/cards/CardsDuck.ts","www/ducks/cards/configureInjector.ts","www/injector/Injector.ts","www/components/board/Card.tsx","www/components/board/Cards.tsx","www/components/board/Hand.tsx","www/components/board/Pile.tsx","www/components/board/Square.tsx","www/components/board/Squares.tsx","www/components/board/BoardView.tsx","www/components/form/Form.tsx","www/components/form/InputText.tsx","www/components/form/Select.tsx","www/components/enterGame/EnterGameForm.tsx","www/components/blog/BlogPostView.tsx","www/components/newGame/NewGameForm.tsx","www/components/views/UnknownView.tsx","www/components/views/CurrentView.tsx","www/components/enterGame/EnterGameView.tsx","www/components/views/MainView.tsx","www/components/newGame/NewGameView.tsx","www/components/blog/BlogView.tsx","www/components/layout/MainHeader.tsx","www/components/layout/MainLayout.tsx","www/ducks/configureInjector.ts","www/AppRenderer.tsx","www/index.ts","www/configureInjector.ts"],"names":["SET_VIEW","setView","view","type","getView","state","ViewDuck","action","set","root","merge","configureDucksViewInjector","injector","register","ReduxReducer","Error","appCompose","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","ReduxStore","store","reducers","afterActions","this","createStore","reduce","applyMiddleware","thunk","next","afterAction","list","ReduxAfterAction","forEach","a","result","s","r","getState","dispatch","selector","decrementLoading","incrementLoading","isLoading","loading","LoadingDuck","ApiRest","url","options","fetch","method","headers","response","json","ok","Promise","reject","status","data","body","get","JSON","stringify","REPLACE_GAME","replaceGame","game","getCurrentUser","currentUser","name","replaceCurrentUser","CurrentUserDuck","configureCurrentUserInjector","ENTER_GAME","enterGame","getGameName","gameName","DESELECT_CARD","deselectCard","REPLACE_CURRENT_POST","replaceCurrentPost","currentPost","REPLACE_POST_LIST","replacePostList","NEW_GAME","newGame","NewGameDuck","apiRest","reduxStore","post","configureDucksNewGameInjector","READY_GAME","readyGame","REFRESH_GAME","refreshGame","PLAY_CARD_INTO_PILE","playCardIntoPile","card","pile","lastFakeId","REPLACE_CARDS","replaceCards","cards","map","c","id","getSelectedCard","selectedCard","PLAY_SELECTED_CARD","playSelectedCard","SELECT_CARD","selectCard","getGameRound","round","listPlayers","Object","keys","players","EMPTY","listPileCards","piles","listSquareCards","player","square","squares","compare","b","listPlays","values","flatMap","p","sort","ownerName","getCurrentPost","blog","getPostList","GameDuck","undefined","EnterGameDuck","playerName","ReadyGameDuck","select","plays","put","RefreshGameDuck","ReplaceGameDuck","currentPlayerName","configureDucksGameInjector","SelectedCardDuck","PlaySelectedCardDuck","configureDucksSelectedCardInjector","BlogDuck","BlogSetViewDuck","loadPostList","loadPost","postId","CardsDuck","path","getCardPath","mutatePush","assignCard","computeCards","oldCard","newCard","oldPath","newPath","wrap","update","arr","filter","value","reducePlayCardIntoPile","Injector","symbols","Map","instances","Type","Constructor","has","push","length","instance","C","configurer","typeColors","food","knight","field","event","typeIcons","nameIcons","f1","k1","forest","grain","sheep","cardClassName","css","Card","useDispatch","className","data-testid","data-name","onClick","style","background","Cards","key","handClassName","Hand","useSelector","pileClassName","Pile","squareClassName","Square","Squares","PlayerView","formClassName","Form","onSubmit","children","InputText","forwardRef","ref","label","Select","v","EnterGameForm","useRef","e","preventDefault","current","postClassName","NewGameForm","scenario","useState","createRef","setPlayers","idx","UnknownView","Views","BoardView","EnterGameView","MainView","NewGameView","BlogView","role","title","BlogPostView","source","escapeHtml","CurrentView","View","headerClassName","Title","Space","Fill","Spinner","MainHeader","MainLayout","configureDucksnjector","configure","configureBlogInjector","configureCardsInjector","configureGameInjector","configureLoadingInjector","configureNewGameInjector","configureSelectedCardInjector","configureViewInjector","AppRenderer","getStore","renderedApp","configureDucksInjector","render","ReactDOM","document","getElementById"],"mappings":"+QAAO,IAAMA,EAAW,gBACjB,SAASC,EAAQC,GACtB,MAAO,CACLC,KAAMH,EACNE,QCJG,SAASE,EAAQC,GACtB,OAAOA,EAAMH,K,gCCQFI,EAAb,+FACSD,EAAkBE,GAGvB,OAFKF,EAAMH,OAAMG,EAAQG,YAAIH,EAAO,OAAQ,CAAEI,KAAM,UAE5CF,EAAOJ,MACb,KAAKH,EACH,OAAOU,YAAML,EAAO,OAAQE,EAAOL,MACrC,QACE,OAAOG,OARf,KCLe,SAASM,EAA2BC,GACjDA,EAASC,SAASC,IAAcR,K,iFCLrBQ,EAAb,WACE,aACE,MADa,oBACP,IAAIC,MAAM,mCAFpB,mDAKSV,EAAWE,GAChB,MAAM,IAAIQ,MAAM,sCANpB,M,gHCMMC,EACe,qBAAXC,QACLA,OAAeC,sCAClBC,IAEWC,EAAb,WAME,WAAYR,GAAqB,IAAD,gCALxBS,WAKwB,OAJxBT,cAIwB,OAHxBU,SAAkC,KAGV,KAFxBC,aAA0C,KAGhDC,KAAKZ,SAAWA,EAChBY,KAAKH,MAAQI,aACX,SAACpB,EAAYE,GAAb,OAAgC,EAAKmB,OAAOrB,EAAOE,KACnDS,EACEW,YAAgBC,KAAO,kBAAM,SAACC,GAAD,OAAoB,SAACtB,GAAD,OAC/C,EAAKuB,YAAYD,EAAMtB,UAZjC,wDAkBcsB,EAAgBtB,GAC1BsB,EAAKtB,GAEoB,MAArBiB,KAAKD,eACPC,KAAKD,aAAeC,KAAKZ,SAASmB,KAAKC,MAEzCR,KAAKD,aAAaU,SAAQ,SAACC,GAAD,OAAOA,EAAEJ,YAAYvB,QAxBnD,+BA2B8C,IAArCF,EAAoC,uDAAxB,GAAIE,EAAoB,uCACpB,MAAjBiB,KAAKF,WAAkBE,KAAKF,SAAWE,KAAKZ,SAASmB,KAAKjB,MAE9D,IAAMqB,EAASX,KAAKF,SAASI,QAAO,SAACU,EAAGC,GAAJ,OAAUA,EAAEX,OAAOU,EAAG7B,KAASF,GAEnE,OAAO8B,IAhCX,iCAoCI,OAAOX,KAAKH,QApChB,iCAwCI,OAAOG,KAAKH,MAAMiB,aAxCtB,+BA2CW/B,GACPiB,KAAKH,MAAMkB,SAAShC,KA5CxB,6BA+CYiC,GACR,OAAOA,EAAShB,KAAKc,gBAhDzB,M,qKCVO,SAASG,IACd,MAAO,CAAEtC,KAFsB,6BCC1B,SAASuC,IACd,MAAO,CAAEvC,KAFsB,6BCA1B,SAASwC,EAAUtC,GACxB,OAAOA,EAAMuC,QAAU,E,gCCSZC,EAAb,+FACSxC,EAAqBE,GAG1B,OAFqB,MAAjBF,EAAMuC,UAAiBvC,EAAQG,YAAIH,EAAO,UAAW,IAEjDE,EAAOJ,MACb,IFf2B,4BEiBzB,OADAE,EAAQG,YAAIH,EAAO,UAAWA,EAAMuC,QAAU,GAEhD,IHlB2B,4BGmBzB,OAAOpC,YAAIH,EAAO,UAAWA,EAAMuC,QAAU,GAC/C,QACE,OAAOvC,OAXf,KCNe,SAASM,EAA2BC,GACjDA,EAASC,SAASC,IAAc+B,K,gHCLrBC,EAAb,qIACYC,EAAaC,GADzB,yFAE2BC,MAAMF,EAAD,aAC1BG,OAAQ,MACRC,QAAQ,aACN,eAAgB,mCACZH,GAAWA,EAAQG,UAEtBH,IART,cAEUI,EAFV,gBAWyBA,EAASC,OAXlC,UAWUlB,EAXV,OAaSiB,EAASE,GAblB,yCAcaC,QAAQC,OAAO,CACpBC,OAAQL,EAASK,OACjBC,KAAMvB,KAhBd,gCAmBWA,GAnBX,uKAsBYY,EAAaY,EAAWX,GAtBpC,0FAuBWxB,KAAKoC,IAAIb,EAAT,aACLG,OAAQ,MACRS,KAAME,KAAKC,UAAUH,IAClBX,KA1BT,+KA8BaD,EAAaY,EAAWX,GA9BrC,0FA+BWxB,KAAKoC,IAAIb,EAAT,aACLG,OAAQ,OACRS,KAAME,KAAKC,UAAUH,IAClBX,KAlCT,iLAsCeD,EAAaC,GAtC5B,0FAuCWxB,KAAKoC,IAAIb,EAAT,aAAgBG,OAAQ,UAAaF,KAvChD,iH,iFCAahB,EAAb,WACE,aACE,MADa,oBACP,IAAIjB,MAAM,mCAFpB,wDAKcR,GACV,MAAM,IAAIQ,MAAM,sCANpB,M,8BCAA,m9E,gCCAA,mqB,6BCAA,oEAAO,IAAMgD,EAAe,oBACrB,SAASC,EAAYC,GAC1B,MAAO,CACL9D,KAAM4D,EACNE,U,6BCFG,SAASC,EAAe7D,GAC7B,OAAOA,EAAM8D,YAAYC,K,sGCFpB,SAASC,EAAmBD,GACjC,MAAO,CACLjE,KAHgC,mCAIhCiE,Q,gCCESE,EAAb,+FACSjE,EAAyBE,GAG9B,OAFKF,EAAM8D,cAAa9D,EAAQG,YAAIH,EAAO,cAAe,CAAE+D,KAAM,QAE1D7D,EAAOJ,MACb,IDX8B,mCCY5B,OAAOK,YAAIH,EAAO,mBAAoBE,EAAO6D,MAC/C,QACE,OAAO/D,OARf,KCFe,SAASkE,EAA6B3D,GACnDA,EAASC,SAASC,IAAcwD,K,+BCLlC,oEAAO,IAAME,EAAa,kBACnB,SAASC,EAAUd,GACxB,MAAO,CACLxD,KAAMqE,EACNb,U,6BCFG,SAASe,EAAYrE,GAC1B,OAAOA,EAAM4D,KAAKU,SADpB,mC,6BCFA,oEAAO,IAAMC,EAAgB,6BACtB,SAASC,IACd,MAAO,CACL1E,KAAMyE,K,6BCDV,oEAAO,IAAME,EAAuB,4BAC7B,SAASC,EACdC,GAEA,MAAO,CACL7E,KAAM2E,EACNE,iB,6BCNJ,oEAAO,IAAMC,EAAoB,yBAC1B,SAASC,EAAgBnD,GAC9B,MAAO,CACL5B,KAAM8E,EACNlD,U,6BCNJ,iM,6BCAA,2W,mICAO,IAAMoD,EAAW,mBACjB,SAASC,EAAQzB,GACtB,MAAO,CACLxD,KAAMgF,EACNxB,Q,+ECIS0B,EAAb,WAIE,WAAYzE,GAAqB,yBAHzB0E,aAGwB,OAFxBC,gBAEwB,EAC9B/D,KAAK8D,QAAU1E,EAASgD,IAAId,KAC5BtB,KAAK+D,WAAa3E,EAASgD,IAAIxC,KANnC,iGASoBb,GATpB,oEAUQA,EAAOJ,OAASgF,EAVxB,wDAYI3D,KAAK+D,WAAWhD,SAASG,eAZ7B,SAaUlB,KAAK8D,QAAQE,KAAb,gBAAmCjF,EAAOoD,MAbpD,OAcInC,KAAK+D,WAAWhD,SAAStC,YAAQ,CAAEQ,KAAM,UACzCe,KAAK+D,WAAWhD,SAASE,eAf7B,8GCJe,SAASgD,EAA8B7E,GACpDA,EAASC,SAASmB,IAAkBqD,K,oCCLtC,oEAAO,IAAMK,EAAa,kBACnB,SAASC,IACd,MAAO,CACLxF,KAAMuF,K,6BCHV,oEAAO,IAAME,EAAe,oBACrB,SAASC,IACd,MAAO,CACL1F,KAAMyF,K,6BCDV,oEAAO,IAAME,EAAsB,4BAC5B,SAASC,EAAiBC,EAAiBC,GAChD,MAAO,CACL9F,KAAM2F,EACNE,OACAC,U,6GCLAC,EAAa,EAEJC,EAAgB,sBACtB,SAASC,EAAaC,GAC3B,MAAO,CACLlG,KAAMgG,EACNE,MAAOA,EAAMC,KAAI,SAACC,GAAD,mBAAC,eAAYA,GAAb,IAAgBC,GAAIN,Y,6BCLlC,SAASO,EACdpG,GAGA,OADaA,EAAMqG,aAAaV,MACjB,KAJjB,mC,6BCHA,oEAAO,IAAMW,EAAqB,kCAC3B,SAASC,EAAiBX,GAC/B,MAAO,CACL9F,KAAMwG,EACNV,U,6BCFJ,oEAAO,IAAMY,EAAc,2BACpB,SAASC,EAAWd,GACzB,MAAO,CACL7F,KAAM0G,EACNb,U,yDCJG,SAASe,EAAa1G,GAA2B,IAAD,EACrD,iBAAOA,EAAM4D,YAAb,aAAO,EAAY+C,MADrB,mC,6BCAA,sCAAI/C,EAAiC,KACjC9B,EAA0B,KACvB,SAAS8E,EAAY5G,GAC1B,OAAIA,EAAM4D,OAASA,EAAa9B,GAEhC8B,EAAO5D,EAAM4D,KACb9B,EAAS+E,OAAOC,KAAKlD,EAAKmD,Y,6GCL5B,sCAAMC,EAAqB,GACpB,SAASC,EACdjH,EADK,GAGS,IAAD,EADX4F,EACW,EADXA,KAEF,OAAO,UAAA5F,EAAMgG,MAAMkB,MAAMtB,UAAlB,eAAyBI,QAASgB,I,6BCL3C,sCAAMA,EAAqB,GACpB,SAASG,EACdnH,EADK,GAGS,IAAD,EADXoH,EACW,EADXA,OAAQC,EACG,EADHA,OAEV,OAAO,UAAArH,EAAMgG,MAAMe,QAAQK,GAAQE,QAAQD,UAApC,eAA6CrB,QAASgB,I,2ECN/D,SAASO,EAAQ1F,EAAQ2F,GACvB,OAAI3F,EAAI2F,GAAW,EACf3F,EAAI2F,EAAU,EACX,EAGT,IAAIN,EAAa,KACbpF,EAAgB,GACb,SAAS2F,EAAUzH,GACxB,OAAIA,EAAMgG,MAAMkB,QAAUA,EAAcpF,GACxCoF,EAAQlH,EAAMgG,MAAMkB,MAEpBpF,EAAS+E,OAAOa,OAAO1H,EAAMgG,MAAMkB,OAChCS,SAAQ,SAACC,GAAD,OAAOA,EAAE5B,SACjBC,KAAI,SAACN,GACoBA,EAAhBQ,GACR,OAFa,YACWR,EADX,WAIdkC,MAAK,SAAChG,EAAG2F,GACR,OAAI3F,EAAEiG,YAAcN,EAAEM,UAAkBP,EAAQ1F,EAAEiG,UAAWN,EAAEM,WAC3DjG,EAAE+D,OAAS4B,EAAE5B,KAAa2B,EAAQ1F,EAAE+D,KAAM4B,EAAE5B,MAC5C/D,EAAEwF,SAAWG,EAAEH,OAAeE,EAAQ1F,EAAEwF,OAAQG,EAAEH,QAClDxF,EAAE/B,OAAS0H,EAAE1H,KAAayH,EAAQ1F,EAAE/B,KAAM0H,EAAE1H,MACzCyH,EAAQ1F,EAAEkC,KAAMyD,EAAEzD,Y,6DCvBxB,SAASgE,EACd/H,GAEA,OAAOA,EAAMgI,KAAKrD,YAHpB,mC,6BCAO,SAASsD,EAAYjI,GAC1B,OAAOA,EAAMgI,KAAKtG,KADpB,mC,+ICKawG,EAAb,+FACSlI,EAAkBE,GAGvB,YAFmBiI,IAAfnI,EAAM4D,OAAoB5D,EAAQG,YAAIH,EAAO,OAAQ,OAEjDE,EAAOJ,MACb,KAAK4D,IAAe,IAAD,EACaxD,EAAO0D,KAAnBmB,GADD,EACTiB,MADS,0BAEjB,OAAO3F,YAAML,EAAO,OAAQ+E,GAE9B,KAAKD,IACH,OAAO,2BAAK9E,GAAZ,IAAmB4D,KAAM,CAAEU,SAAUpE,EAAOoD,KAAKgB,YAEnD,QACE,OAAOtE,OAbf,K,6DCEaoI,EAAb,WAIE,WAAY7H,GAAqB,yBAHzB2E,gBAGwB,OAFxBD,aAEwB,EAC9B9D,KAAK8D,QAAU1E,EAASgD,IAAId,KAC5BtB,KAAK+D,WAAa3E,EAASgD,IAAIxC,KANnC,iGASoBb,GATpB,0EAUQA,EAAOJ,OAASqE,IAVxB,wDAYIhD,KAAK+D,WAAWhD,SAASG,eAZ7B,SAauBlB,KAAK8D,QAAQ1B,IAAb,wBACArD,EAAOoD,KAAKgB,SADZ,oBACgCpE,EAAOoD,KAAK+E,aAdnE,OAaUzE,EAbV,OAiBIzC,KAAK+D,WAAWhD,SAASyB,YAAYC,IACrCzC,KAAK+D,WAAWhD,SAAStC,YAAQ,CAAEQ,KAAM,WACzCe,KAAK+D,WAAWhD,SAASE,eAnB7B,8G,gCCGakG,EAAb,WAIE,WAAY/H,GAAqB,yBAHzB2E,gBAGwB,OAFxBD,aAEwB,EAC9B9D,KAAK8D,QAAU1E,EAASgD,IAAId,KAC5BtB,KAAK+D,WAAa3E,EAASgD,IAAIxC,KANnC,iGASoBb,GATpB,gFAUQA,EAAOJ,OAASuF,IAVxB,wDAYUf,EAAWnD,KAAK+D,WAAWqD,OAAOlE,KAClCgE,EAAalH,KAAK+D,WAAWqD,OAAO1E,KACpC2E,EAAQrH,KAAK+D,WAAWqD,OAAOd,aAErCtG,KAAK+D,WAAWhD,SAASG,eAhB7B,SAiBuBlB,KAAK8D,QAAQwD,IAAb,wBACAnE,EADA,oBACoB+D,EADpB,UAEjB,CAAErC,MAAOwC,EAAOH,eAnBtB,OAiBUzE,EAjBV,OAsBIzC,KAAK+D,WAAWhD,SAASyB,YAAYC,IACrCzC,KAAK+D,WAAWhD,SAAStC,YAAQ,CAAEQ,KAAM,WACzCe,KAAK+D,WAAWhD,SAASE,eAxB7B,+G,QCHasG,EAAb,WAIE,WAAYnI,GAAqB,yBAHzB2E,gBAGwB,OAFxBD,aAEwB,EAC9B9D,KAAK8D,QAAU1E,EAASgD,IAAId,KAC5BtB,KAAK+D,WAAa3E,EAASgD,IAAIxC,KANnC,iGASoBb,GATpB,4EAUQA,EAAOJ,OAASyF,IAVxB,iDAYUjB,EAAWnD,KAAK+D,WAAWqD,OAAOlE,KAClCgE,EAAalH,KAAK+D,WAAWqD,OAAO1E,KAE1C1C,KAAK+D,WAAWhD,SAASkC,YAAU,CAAEE,WAAU+D,gBAfnD,8GCDaM,EAAb,WAIE,WAAYpI,GAAqB,yBAHzB2E,gBAGwB,OAFxBD,aAEwB,EAC9B9D,KAAK8D,QAAU1E,EAASgD,IAAId,KAC5BtB,KAAK+D,WAAa3E,EAASgD,IAAIxC,KANnC,iGASoBb,GATpB,0EAUQA,EAAOJ,OAAS4D,IAVxB,iDAWUE,EAAO1D,EAAO0D,KAEpBzC,KAAK+D,WAAWhD,SAAS8B,YAAmBJ,EAAKgF,oBACjDzH,KAAK+D,WAAWhD,SAAS6D,uBAAanC,EAAKoC,QAd/C,8GCCe,SAAS6C,EAA2BtI,GACjDA,EAASC,SAASC,IAAcyH,GAChC3H,EAASC,SAASmB,IAAkByG,GACpC7H,EAASC,SAASmB,IAAkB2G,GACpC/H,EAASC,SAASmB,IAAkB+G,GACpCnI,EAASC,SAASmB,IAAkBgH,K,uHCPzBG,EAAb,+FACS9I,EAA0BE,GAG/B,OAFKF,EAAMqG,eAAcrG,EAAQG,YAAIH,EAAO,eAAgB,CAAE2F,KAAM,QAE5DzF,EAAOJ,MACb,KAAK0G,IACH,OAAOrG,YAAIH,EAAO,oBAAqBE,EAAOyF,MAChD,KAAKpB,IACH,OAAOpE,YAAIH,EAAO,oBAAqB,MACzC,QACE,OAAOA,OAVf,K,sDCCa+I,EAAb,WAGE,WAAYxI,GAAqB,yBAFzB2E,gBAEwB,EAC9B/D,KAAK+D,WAAa3E,EAASgD,IAAIxC,KAJnC,iGAOoBb,GAPpB,0EAQQA,EAAOJ,OAASwG,IARxB,iDAUUX,EAAOxE,KAAK+D,WAAWqD,OAAOnC,KACpCjF,KAAK+D,WAAWhD,SAASsC,eACzBrD,KAAK+D,WAAWhD,SAASwD,2BAAiBC,EAAMzF,EAAO0F,OAZ3D,8GCFe,SAASoD,EAAmCzI,GACzDA,EAASC,SAASC,IAAcqI,GAChCvI,EAASC,SAASmB,IAAkBoH,K,uHCDzBE,EAAb,+FACSjJ,EAAkBE,GAIvB,OAHKF,EAAMgI,OACThI,EAAQG,YAAIH,EAAO,OAAQ,CAAE0B,KAAM,GAAIiD,YAAa,QAE9CzE,EAAOJ,MACb,KAAK2E,IACH,OAAOtE,YAAIH,EAAO,mBAAoBE,EAAOyE,aAC/C,KAAKC,IACH,OAAOzE,YAAIH,EAAO,YAAaE,EAAOwB,MACxC,QACE,OAAO1B,OAXf,K,qDCEakJ,EAAb,WAIE,WAAY3I,GAAqB,yBAHzB2E,gBAGwB,OAFxBD,aAEwB,EAC9B9D,KAAK8D,QAAU1E,EAASgD,IAAId,KAC5BtB,KAAK+D,WAAa3E,EAASgD,IAAIxC,KANnC,iGASoBb,GATpB,oEAUQA,EAAOJ,OAASH,IAVxB,sDAYYO,EAAOL,KAAKO,KAZxB,OAaW,SAbX,OAgBW,aAhBX,uCAcce,KAAKgI,eAdnB,2DAiBchI,KAAKiI,SAASlJ,EAAOL,KAAKwJ,QAjBxC,0SAyBIlI,KAAK+D,WAAWhD,SAASG,eAzB7B,SA0B2BlB,KAAK8D,QAAQ1B,IAAb,iBA1B3B,gBA0BY7B,EA1BZ,EA0BYA,KACRP,KAAK+D,WAAWhD,SAAS2C,YAAgBnD,IACzCP,KAAK+D,WAAWhD,SAASE,eA5B7B,8KA+BiBiH,GA/BjB,8EAgCIlI,KAAK+D,WAAWhD,SAASG,eAhC7B,SAiCuBlB,KAAK8D,QAAQ1B,IAAb,wBAAkC8F,IAjCzD,OAiCUlE,EAjCV,OAkCIhE,KAAK+D,WAAWhD,SAASwC,YAAmBS,IAC5ChE,KAAK+D,WAAWhD,SAASE,eAnC7B,8GCHe,SAAS9B,EAA2BC,GACjDA,EAASC,SAASC,IAAcwI,GAChC1I,EAASC,SAASmB,IAAkBuH,K,gICEzBI,EAAb,+FACStJ,EAA+BE,GAGpC,OAFmB,MAAfF,EAAMgG,QAAehG,EAAQG,YAAIH,EAAO,QAAS,OAE7CE,EAAOJ,MACb,KAAKgG,IACH,OAAO3F,YACLH,EACA,QA4BV,SAAsBgG,EAAoBlC,GACxC,IAAMhC,EAA8B,CAAEiF,QAAS,GAAIG,MAAO,IAE1D,OADAlB,EAAMpE,SAAQ,SAACsE,GAAD,OAIhB,SACEP,EACA7B,EACAhC,GAGA,IADsB6D,EAAdmC,UACQ,OAEhB,IAAMyB,EAAOC,EAAY7D,EAAM7B,GAC/B2F,eAAW3H,EAAQyH,EAAM5D,GAbJ+D,CAAWxD,EAAGpC,EAAahC,MACzCA,EA9BC6H,CAAazJ,EAAO8F,MAAOhG,EAAM4D,KAAKgF,oBAE1C,KAAKnD,IACH,OAOR,SACEzF,EACA2F,EACAC,GAEA,IAAMgE,EAAUjE,EACVkE,EAAO,2BAAQD,GAAR,IAAiBhE,SAExBkE,EAAO,CAAI,SAAJ,mBAAgBN,EAAYI,EAASjE,EAAKmC,aACjDiC,EAAO,CAAI,SAAJ,mBAAgBP,EAAYK,EAASlE,EAAKmC,aAEvD,OAAOkC,YAAKhK,GACTiK,OAAOH,GAAS,SAACI,GAAD,OAASA,EAAIC,QAAO,SAACjE,GAAD,OAAkBA,IAAM0D,QAC5DK,OAAOF,GAAS,eAACG,EAAD,uDAAO,GAAP,4BAAkBA,GAAlB,CAAuBL,OACvCO,QArBUC,CAAuBrK,EAAOE,EAAOyF,KAAMzF,EAAO0F,MAC3D,QACE,OAAO5F,OAdf,KAsDA,SAASwJ,EAAY7D,EAAiB7B,GAAsB,IAClDgE,EAA4BnC,EAA5BmC,UAAWT,EAAiB1B,EAAjB0B,OAAQzB,EAASD,EAATC,KAC3B,OAAOD,EAAKC,MAAQD,EAAKmC,YAAchE,EACnC,CAAC,QAAS8B,EAAM,SAChB,CAAC,UAAWkC,EAAW,WAAYT,EAAQ,S,WChElC,SAAS/G,EAA2BC,GACjDA,EAASC,SAASC,IAAc6I,K,+aCLrBgB,EAAb,iDACUC,QAA2B,IAAIC,IADzC,KAEUC,UAA2B,IAAID,IAFzC,KAGU9C,OAAwB,IAAI8C,IAHtC,qDAMIE,EACAC,GACC,IAAD,EACKxJ,KAAKoJ,QAAQK,IAAIF,IACpBvJ,KAAKoJ,QAAQpK,IAAIuK,EAAM,IAGzB,UAAAvJ,KAAKoJ,QAAQhH,IAAImH,UAAjB,SAAwBG,KAAKF,GAAeD,KAbhD,0BAgBSA,EAA8BN,GACnCjJ,KAAKuG,OAAOvH,IAAIuK,EAAMN,KAjB1B,0BAoBSM,GACL,IAAKvJ,KAAKuG,OAAOkD,IAAIF,GAAO,CAC1B,IAAMhJ,EAAOP,KAAKoJ,QAAQhH,IAAImH,GAC9B,IAAKhJ,EACH,MAAM,IAAIhB,MAAJ,aACEgK,EAAK3G,KADP,4GAIR,IAAM4G,EAAcjJ,EAAKA,EAAKoJ,OAAS,GACjCV,EAAQjJ,KAAK4J,SAASJ,GAC5BxJ,KAAKuG,OAAOvH,IAAIuK,EAAMN,GAGxB,OAAOjJ,KAAKuG,OAAOnE,IAAImH,KAjC3B,2BAoCUA,GAAoC,IAAD,OACzC,IAAKvJ,KAAKuG,OAAOkD,IAAIF,GAAO,CAC1B,IAAMhJ,EAAOP,KAAKoJ,QAAQhH,IAAImH,IAAS,GACjChD,EAAShG,EAAKuE,KAAI,SAAC+E,GAAD,OAAO,EAAKD,SAASC,MAC7C7J,KAAKuG,OAAOvH,IAAIuK,EAAMhD,GAGxB,OAAOvG,KAAKuG,OAAOnE,IAAImH,KA3C3B,gCA8CYO,GAER,OADAA,EAAW9J,MACJA,OAhDX,+BAmDsBwJ,GAClB,IAAKxJ,KAAKsJ,UAAUG,IAAID,GAAc,CACpC,IAAMP,EAAQ,IAAIO,EAAYxJ,MAC9BA,KAAKsJ,UAAUtK,IAAIwK,EAAaP,GAGlC,OAAOjJ,KAAKsJ,UAAUlH,IAAIoH,OAzD9B,K,okBCMA,IAAMO,EAAa,CACjBC,KAAM,UACNC,OAAQ,UACRC,MAAO,UACPC,MAAO,WAGHC,EAAY,CAChBJ,KAAM,eACNC,OAAQ,eACRC,MAAO,eACPC,MAAO,UAGHE,EAAY,CAChBC,GAAI,eACJC,GAAI,eACJL,MAAO,eACPC,MAAO,SACPK,OAAQ,eACRC,MAAO,eACPC,MAAO,gBAGHC,EAAgBC,YAAH,KA6BZ,SAASC,EAAT,GAA8C,IAA9BrG,EAA6B,EAA7BA,KACfzD,EAAW+J,cAGjB,OACE,yBACEC,UAAWJ,EACXK,cAAA,eAAqBxG,EAAK7F,MAC1BsM,YAAWzG,EAAK5B,KAChBsI,QAPW,kBAAMnK,EAASuE,qBAAWd,KAQrC2G,MAAO,CAAEC,WAAYrB,EAAWvF,EAAK7F,QAErC,yBAAKoM,UAAU,QAAQX,EAAU5F,EAAK7F,OACtC,yBAAKoM,UAAU,QAAQV,EAAU7F,EAAK5B,QCpErC,SAASyI,EAAT,GAAmD,IAAlCxG,EAAiC,EAAjCA,MACtB,OACE,oCACGA,EAAMC,KAAI,SAACN,GAAD,OACT,kBAACqG,EAAD,CAAMrG,KAAMA,EAAM8G,IAAK9G,EAAKQ,S,uRCFpC,IAAMuG,EAAgBX,YAAH,KAYZ,SAASY,EAAT,GAA+C,IAA/BvF,EAA8B,EAA9BA,OACfpB,EAAQ4G,aAAY,SAAC7K,GAAD,OACxBoF,0BAAgBpF,EAAG,CAAEqF,SAAQC,OAAQ,OAGvC,OACE,yBAAK6E,UAAWQ,EAAeP,cAAA,UAAgB/E,EAAhB,UAC7B,kBAACoF,EAAD,CAAOxG,MAAOA,K,6TClBpB,IAAM6G,EAAgBd,YAAH,KAcZ,SAASe,EAAT,GAA2C,IAA3B/I,EAA0B,EAA1BA,KACf7B,EAAW+J,cACXjG,EAAQ4G,aAAY,SAAC7K,GAAD,OAAYkF,wBAAclF,EAAG,CAAE6D,KAAM7B,OAG/D,OACE,yBAAKmI,UAAWW,EAAeV,cAAA,eAAqBpI,GAAQsI,QAHjD,kBAAMnK,EAASqE,2BAAiBxC,MAIxCA,EACD,kBAACyI,EAAD,CAAOxG,MAAOA,K,kRCtBpB,IAAM+G,EAAkBhB,YAAH,KAYd,SAASiB,EAAT,GAAyE,IAAvD5F,EAAsD,EAAtDA,OAAQC,EAA8C,EAA9CA,OACzBrB,EAAQ4G,aAAY,SAAC7K,GAAD,OAAYoF,0BAAgBpF,EAAG,CAAEqF,SAAQC,cAEnE,OACE,yBAAK6E,UAAWa,EAAiBZ,cAAA,UAAgB/E,EAAhB,mBAAiCC,IAChE,kBAACyF,EAAD,CAAM/I,KAAI,UAAKqD,EAAL,mBAAsBC,KAChC,6BACA,kBAACmF,EAAD,CAAOxG,MAAOA,KCvBb,SAASiH,EAAT,GAAkD,IAA/B7F,EAA8B,EAA9BA,OACxB,OACE,6BACE,kBAAC4F,EAAD,CAAQ5F,OAAQA,EAAQC,OAAQ,IAChC,kBAAC2F,EAAD,CAAQ5F,OAAQA,EAAQC,OAAQ,IAChC,kBAAC2F,EAAD,CAAQ5F,OAAQA,EAAQC,OAAQ,IAChC,kBAAC2F,EAAD,CAAQ5F,OAAQA,EAAQC,OAAQ,IAChC,kBAAC2F,EAAD,CAAQ5F,OAAQA,EAAQC,OAAQ,KCHtC,SAAS6F,EAAT,GAAqD,IAA/B9F,EAA8B,EAA9BA,OACpB,OACE,oCACE,uCAAaA,GACb,kBAAC6F,EAAD,CAAS7F,OAAQA,EAAQqF,IAAKrF,IAC9B,kBAACuF,EAAD,CAAMvF,OAAQA,IACd,8B,8XCVN,IAAM+F,EAAgBpB,YAAH,KAkBZ,SAASqB,EAAT,GAA4C,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,SAC/B,OACE,0BAAMpB,UAAWiB,EAAeE,SAAUA,GACvCC,GCtBA,IAAMC,EAAYC,sBAAW,WAElCC,GACC,IAFC1J,EAEF,EAFEA,KAAM2J,EAER,EAFQA,MAGR,OACE,6BACE,+BACGA,EACD,6BACA,2BAAO3J,KAAMA,EAAM0J,IAAKA,SCTnBE,EAASH,sBAAW,WAE/BC,GACC,IAFC1J,EAEF,EAFEA,KAAM2J,EAER,EAFQA,MAAOhG,EAEf,EAFeA,OAGf,OACE,6BACE,+BACGgG,EACD,6BACA,4BAAQ3J,KAAMA,EAAM0J,IAAKA,GACtB/F,EAAOzB,KAAI,SAAC2H,GAAD,OACV,4BAAQxD,MAAOwD,EAAGnB,IAAKmB,GACpBA,YCTR,SAASC,IACd,IAAM3L,EAAW+J,cACX3H,EAAgBwJ,mBAChBzF,EAAkByF,mBAaxB,OACE,kBAACV,EAAD,CAAMC,SAZO,SAACU,GACdA,EAAEC,iBAEF9L,EACEkC,oBAAU,CACRE,SAAUA,EAAS2J,QAAQ7D,MAC3B/B,WAAYA,EAAW4F,QAAQ7D,WAOjC,kBAAC,EAAD,CAAWqD,IAAKnJ,EAAUoJ,MAAM,mBAChC,kBAAC,EAAD,CAAWD,IAAKpF,EAAYqF,MAAM,iBAElC,4BAAQ5N,KAAK,UAAb,U,47CCpBN,IAAMoO,EAAgBnC,YAAH,K,4BCDZ,SAASoC,IACd,IAAMjM,EAAW+J,cACX3H,EAAgBwJ,mBAChBM,EAAgBN,mBAHM,EAIEO,mBAAS,CAACC,wBAJZ,mBAIrBvH,EAJqB,KAIZwH,EAJY,KAsB5B,OACE,kBAACnB,EAAD,CAAMC,SAbO,SAACU,GACdA,EAAEC,iBAEF9L,EACE6C,YAAQ,CACNT,SAAUA,EAAS2J,QAAQ7D,MAC3BgE,SAAUA,EAASH,QAAQ7D,MAC3BrD,QAASA,EAAQd,KAAI,SAAC2B,GAAD,MAAa,CAAE7D,KAAM6D,EAAEqG,QAAQ7D,eAOtD,kBAAC,EAAD,CAAWqD,IAAKnJ,EAAUoJ,MAAM,mBAChC,kBAAC,EAAD,CACED,IAAKW,EACLrK,KAAK,WACL2J,MAAM,iBACNhG,OAAQ,CAAC,WAEVX,EAAQd,KAAI,SAAC2B,EAAG4G,GAAJ,OACX,kBAAC,EAAD,CAAWf,IAAK7F,EAAG8F,MAAK,iBAAYc,EAAM,EAAlB,UAA6B/B,IAAK+B,OAE5D,4BAAQnC,QA7BM,SAAC0B,GACjBA,EAAEC,iBACFO,GAAW,SAAC3G,GAAD,4BAAWA,GAAX,CAAc0G,6BA2BvB,cACA,4BAAQxO,KAAK,UAAb,gBCpCC,SAAS2O,IACd,IAAM5O,EAAO+M,YAAY7M,KACzB,OACE,2CAEE,6BAFF,0GAKE,6BAAMyD,KAAKC,UAAU5D,KCF3B,IAAM6O,EAAQ,CACZC,UROK,WACL,IAAM5H,EAAU6F,YAAYhG,eAC5B,OAAgB,OAAZG,EAAyB,KAG3B,6BACE,6BACA,kBAAC+F,EAAD,CAAM/I,KAAK,UACX,kBAAC+I,EAAD,CAAM/I,KAAK,cACX,kBAAC+I,EAAD,CAAM/I,KAAK,eACX,6BACCgD,EAAQd,KAAI,SAACmB,GAAD,OACX,kBAAC8F,EAAD,CAAY9F,OAAQA,EAAQqF,IAAKrF,SQlBvCwH,cCTK,WACL,OAAO,kBAACf,EAAD,ODSPgB,SEXK,WACL,OAAO,2CFWPC,YGXK,WACL,OAAO,kBAACX,EAAD,OHWPY,SIVK,WACL,IAAM7M,EAAW+J,cACXvK,EAAOkL,YAAY3E,eAIzB,OAAKvG,EAGH,4BACGA,EAAKuE,KAAI,SAACd,GAAD,OACR,wBAAIsH,IAAKtH,EAAKgB,GAAIkG,QAAS,kBARrBhD,EAQ8BlE,EAAKgB,GAP7CjE,EAAStC,YAAQ,CAAEQ,KAAM,WAAYiJ,YAD5B,IAACA,IASJ,0BAAM2F,KAAK,UAAU7J,EAAK8J,OAD5B,aALY,MJKlBC,aHsDK,WACL,IAAM/J,EAAOyH,YAAY7E,kBAEzB,OAAK5C,EAGH,6BAAS+G,UAAWgC,GAClB,kBAAC,IAAD,CAAeiB,OAAQhK,EAAK7B,KAAM8L,YAAY,KAJhC,OGtDb,SAASC,IACd,IAAMjP,EAAOwM,aAAY,SAAC5M,GAAD,OAAWD,YAAQC,GAAOI,QAC7CkP,EAAOZ,EAAMtO,EAAO,SAAWqO,EAErC,OAAO,kBAACa,EAAD,M,ywBKdT,IAAMC,GAAkBxD,YAAH,MA8CfyD,GAAQ,SAAC,GAAD,IAAGlC,EAAH,EAAGA,SAAH,OAAuB,0BAAMpB,UAAU,SAASoB,IACxDmC,GAAQ,kBAAM,yBAAKvD,UAAU,WAC7BwD,GAAO,kBAAM,yBAAKxD,UAAU,UAC5ByD,GAAU,kBACd,0BAAMzD,UAAU,SAASC,cAAY,WAArC,WAKK,SAASyD,KACd,IAAM1N,EAAW+J,cACX5D,EAAauE,YAAY/I,MACzB8C,EAAQiG,YAAYlG,gBACpBnE,EAAUqK,YAAYtK,MAO5B,OACE,4BAAQ4J,UAAWqD,IACjB,kBAAC,GAAD,8BACA,kBAAC,GAAD,MACA,4BAAQlD,QAVI,kBAAMnK,EAAStC,YAAQ,CAAEQ,KAAM,eAU3C,YACA,4BAAQiM,QAVM,kBAAMnK,EAAStC,YAAQ,CAAEQ,KAAM,iBAU7C,cACA,4BAAQiM,QAVK,kBAAMnK,EAAStC,YAAQ,CAAEQ,KAAM,YAU5C,QACA,kBAAC,GAAD,MACCiI,GACC,0BAAM8D,cAAY,uBAAuB9D,GAE1C1B,GAAS,0BAAMwF,cAAY,iBAAlB,MAAsCxF,GAChD,kBAAC,GAAD,MACA,4BAAQ0F,QAhBE,kBAAMnK,EAASoD,yBAgBzB,SACA,4BAAQ+G,QAhBI,kBAAMnK,EAASsD,2BAgB3B,WACA,kBAAC,GAAD,MACCjD,GAAW,kBAAC,GAAD,OCvFX,SAASsN,KACd,OACE,6BACE,kBAACD,GAAD,MACA,kBAACP,EAAD,O,6BCGS,SAASS,GAAsBvP,GAC5CA,EAASwP,UAAUC,WACnBzP,EAASwP,UAAUE,WACnB1P,EAASwP,UAAU7L,MACnB3D,EAASwP,UAAUG,WACnB3P,EAASwP,UAAUI,MACnB5P,EAASwP,UAAUK,KACnB7P,EAASwP,UAAUM,WACnB9P,EAASwP,UAAUO,KAEnB/P,EAASC,SAASO,MCfb,IAAMwP,GAAb,WAGE,WAAYhQ,GAAqB,yBAFzB2E,gBAEwB,EAC9B/D,KAAK+D,WAAa3E,EAASgD,IAAIxC,MAJnC,qDAQI,IAAMC,EAAQG,KAAK+D,WAAWsL,WAE9B,OACE,kBAAC,IAAD,CAAUxP,MAAOA,GACf,6BACE,kBAAC6O,GAAD,YAbV,KCGA,IACMY,IADW,IAAInG,GAAWyF,WCJjB,SAA8BxP,GAC3CA,EAASwP,UAAUW,IAEnBnQ,EAASC,SAASiC,KAClBlC,EAASC,SAAS+P,ODCShN,IAAIgN,IAAaI,SAE9CC,IAASD,OAAOF,GAAaI,SAASC,eAAe,W","file":"static/js/main.95bf1b27.chunk.js","sourcesContent":["export const SET_VIEW = \"view/SET_VIEW\";\nexport function setView(view: object) {\n  return {\n    type: SET_VIEW,\n    view,\n  };\n}\n","export function getView(state: any) {\n  return state.view;\n}\n","import { Action } from \"redux\";\nimport { set, merge } from \"object-path-immutable\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { SET_VIEW } from \"./setView\";\n\ninterface ViewState {\n  view: { root: string };\n}\n\nexport class ViewDuck implements ReduxReducer {\n  reduce(state: ViewState, action: Action & ViewState): {} {\n    if (!state.view) state = set(state, \"view\", { root: \"Main\" });\n\n    switch (action.type) {\n      case SET_VIEW:\n        return merge(state, \"view\", action.view);\n      default:\n        return state;\n    }\n  }\n}\n","import { Injector } from \"www/injector\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { ViewDuck } from \"./ViewDuck\";\n\nexport default function configureDucksViewInjector(injector: Injector) {\n  injector.register(ReduxReducer, ViewDuck);\n}\n","export class ReduxReducer {\n  constructor() {\n    throw new Error(\"Cannot instantiate an interface\");\n  }\n\n  reduce(state: {}, action: { type: string }): {} {\n    throw new Error(\"Cannot call an abstract method\");\n  }\n}\n","import { applyMiddleware, compose, createStore, Action } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Injector } from \"www/injector\";\nimport { ReduxAfterAction } from \"./ReduxAfterAction\";\nimport { ReduxReducer } from \"./ReduxReducer\";\n\nconst appCompose =\n  (typeof window !== \"undefined\" &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nexport class ReduxStore {\n  private store: any;\n  private injector: Injector;\n  private reducers: ReduxReducer[] | null = null;\n  private afterActions: ReduxAfterAction[] | null = null;\n\n  constructor(injector: Injector) {\n    this.injector = injector;\n    this.store = createStore(\n      (state: any, action: Action) => this.reduce(state, action),\n      appCompose(\n        applyMiddleware(thunk, () => (next: Function) => (action: Action) =>\n          this.afterAction(next, action)\n        )\n      )\n    );\n  }\n\n  afterAction(next: Function, action: Action<any>): any {\n    next(action);\n\n    if (this.afterActions == null)\n      this.afterActions = this.injector.list(ReduxAfterAction);\n\n    this.afterActions.forEach((a) => a.afterAction(action));\n  }\n\n  reduce(state: {} = {}, action: Action): {} {\n    if (this.reducers == null) this.reducers = this.injector.list(ReduxReducer);\n\n    const result = this.reducers.reduce((s, r) => r.reduce(s, action), state);\n    // console.log({ state, action, result });\n    return result;\n  }\n\n  getStore(): any {\n    return this.store;\n  }\n\n  getState(): any {\n    return this.store.getState();\n  }\n\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n\n  select<T>(selector: (s: any) => T): T {\n    return selector(this.getState());\n  }\n}\n","export const DECREMENT_LOADING = \"loading/DECREMENT_LOADING\";\nexport function decrementLoading() {\n  return { type: DECREMENT_LOADING };\n}\n","export const INCREMENT_LOADING = \"loading/INCREMENT_LOADING\";\nexport function incrementLoading() {\n  return { type: INCREMENT_LOADING };\n}\n","export function isLoading(state: any) {\n  return state.loading > 0;\n}\n","import { Action } from \"redux\";\nimport { set } from \"object-path-immutable\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { INCREMENT_LOADING } from \"./incrementLoading\";\nimport { DECREMENT_LOADING } from \"./decrementLoading\";\n\ninterface LoadingState {\n  loading: number;\n}\n\nexport class LoadingDuck implements ReduxReducer {\n  reduce(state: LoadingState, action: Action): {} {\n    if (state.loading == null) state = set(state, \"loading\", 0);\n\n    switch (action.type) {\n      case INCREMENT_LOADING:\n        state = set(state, \"loading\", state.loading + 1);\n        return state;\n      case DECREMENT_LOADING:\n        return set(state, \"loading\", state.loading - 1);\n      default:\n        return state;\n    }\n  }\n}\n","import { Injector } from \"www/injector\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { LoadingDuck } from \"./LoadingDuck\";\n\nexport default function configureDucksViewInjector(injector: Injector) {\n  injector.register(ReduxReducer, LoadingDuck);\n}\n","export class ApiRest {\n  async get(url: string, options?: any) {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        ...(options && options.headers),\n      },\n      ...options,\n    });\n\n    const result = await response.json();\n\n    if (!response.ok)\n      return Promise.reject({\n        status: response.status,\n        data: result,\n      });\n\n    return result;\n  }\n\n  async put(url: string, body: any, options?: any) {\n    return this.get(url, {\n      method: \"PUT\",\n      body: JSON.stringify(body),\n      ...options,\n    });\n  }\n\n  async post(url: string, body: any, options?: any) {\n    return this.get(url, {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      ...options,\n    });\n  }\n\n  async delete(url: string, options: any) {\n    return this.get(url, { method: \"DELETE\", ...options });\n  }\n}\n","export class ReduxAfterAction {\n  constructor() {\n    throw new Error(\"Cannot instantiate an interface\");\n  }\n\n  afterAction(action: { type: string }) {\n    throw new Error(\"Cannot call an abstract method\");\n  }\n}\n","export * from \"./CardsPileState\";\nexport * from \"./CardsPlayerState\";\nexport * from \"./CardsSquareState\";\nexport * from \"./CardState\";\nexport * from \"./CardsState\";\nexport * from \"./listPileCards\";\nexport * from \"./listSquareCards\";\nexport * from \"./listPlays\";\nexport * from \"./playCardIntoPile\";\nexport * from \"./replaceCards\";\n\nexport { default } from \"./configureInjector\";\n","export * from \"./enterGame\";\nexport * from \"./GameState\";\nexport * from \"./getGameName\";\nexport * from \"./getGameRound\";\nexport * from \"./listPlayers\";\nexport * from \"./readyGame\";\nexport * from \"./refreshGame\";\nexport * from \"./replaceGame\";\n\nexport { default } from \"./configureInjector\";\n","export const REPLACE_GAME = \"game/REPLACE_GAME\";\nexport function replaceGame(game: object) {\n  return {\n    type: REPLACE_GAME,\n    game,\n  };\n}\n","import { CurrentUserState } from \"./CurrentUserState\";\n\nexport function getCurrentUser(state: CurrentUserState): string {\n  return state.currentUser.name;\n}\n","export const REPLACE_CURRENT_USER = \"currentUser/REPLACE_CURRENT_USER\";\nexport function replaceCurrentUser(name: string) {\n  return {\n    type: REPLACE_CURRENT_USER,\n    name,\n  };\n}\n","import { Action } from \"redux\";\nimport { set } from \"object-path-immutable\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { REPLACE_CURRENT_USER } from \"./replaceCurrentUser\";\nimport { CurrentUserState } from \"./CurrentUserState\";\n\nexport class CurrentUserDuck implements ReduxReducer {\n  reduce(state: CurrentUserState, action: Action & any): {} {\n    if (!state.currentUser) state = set(state, \"currentUser\", { name: null });\n\n    switch (action.type) {\n      case REPLACE_CURRENT_USER:\n        return set(state, \"currentUser.name\", action.name);\n      default:\n        return state;\n    }\n  }\n}\n","import { Injector } from \"www/injector\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { CurrentUserDuck } from \"./CurrentUserDuck\";\n\nexport default function configureCurrentUserInjector(injector: Injector) {\n  injector.register(ReduxReducer, CurrentUserDuck);\n}\n","export const ENTER_GAME = \"game/ENTER_GAME\";\nexport function enterGame(body: object) {\n  return {\n    type: ENTER_GAME,\n    body,\n  };\n}\n","import { GameState } from \"./GameState\";\n\nexport function getGameName(state: GameState) {\n  return state.game.gameName;\n}\n","export const DESELECT_CARD = \"selectedCard/DESELECT_CARD\";\nexport function deselectCard() {\n  return {\n    type: DESELECT_CARD,\n  };\n}\n","import { BlogState } from \"./BlogState\";\n\nexport const REPLACE_CURRENT_POST = \"blog/REPLACE_CURRENT_POST\";\nexport function replaceCurrentPost(\n  currentPost: BlogState[\"blog\"][\"currentPost\"]\n) {\n  return {\n    type: REPLACE_CURRENT_POST,\n    currentPost,\n  };\n}\n","import { BlogState } from \"./BlogState\";\n\nexport const REPLACE_POST_LIST = \"blog/REPLACE_POST_LIST\";\nexport function replacePostList(list: BlogState[\"blog\"][\"list\"]) {\n  return {\n    type: REPLACE_POST_LIST,\n    list,\n  };\n}\n","export * from \"./deselectCard\";\nexport * from \"./getSelectedCard\";\nexport * from \"./playSelectedCard\";\nexport * from \"./selectCard\";\nexport * from \"./SelectedCardState\";\n\nexport { default } from \"./configureInjector\";\n","export * from \"./BlogState\";\nexport * from \"./getCurrentPost\";\nexport * from \"./getPostList\";\nexport * from \"./replaceCurrentPost\";\nexport * from \"./replacePostList\";\n\nexport { default } from \"./configureInjector\";\n","export const NEW_GAME = \"newGame/NEW_GAME\";\nexport function newGame(body: object) {\n  return {\n    type: NEW_GAME,\n    body,\n  };\n}\n","import { ApiRest } from \"www/ApiRest\";\nimport { Injector } from \"www/injector\";\nimport { decrementLoading, incrementLoading } from \"../loading\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxStore } from \"../ReduxStore\";\nimport { setView } from \"../view\";\nimport { NEW_GAME } from \"./newGame\";\n\nexport class NewGameDuck implements ReduxAfterAction {\n  private apiRest: ApiRest;\n  private reduxStore: ReduxStore;\n\n  constructor(injector: Injector) {\n    this.apiRest = injector.get(ApiRest);\n    this.reduxStore = injector.get(ReduxStore);\n  }\n\n  async afterAction(action: any) {\n    if (action.type !== NEW_GAME) return;\n\n    this.reduxStore.dispatch(incrementLoading());\n    await this.apiRest.post(`/api/v1/games`, action.body);\n    this.reduxStore.dispatch(setView({ root: \"Main\" }));\n    this.reduxStore.dispatch(decrementLoading());\n  }\n}\n","import { Injector } from \"www/injector\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { NewGameDuck } from \"./NewGameDuck\";\n\nexport default function configureDucksNewGameInjector(injector: Injector) {\n  injector.register(ReduxAfterAction, NewGameDuck);\n}\n","export const READY_GAME = \"game/READY_GAME\";\nexport function readyGame() {\n  return {\n    type: READY_GAME,\n  };\n}\n","export const REFRESH_GAME = \"game/REFRESH_GAME\";\nexport function refreshGame() {\n  return {\n    type: REFRESH_GAME,\n  };\n}\n","import { CardState } from \"./CardState\";\n\nexport const PLAY_CARD_INTO_PILE = \"cards/PLAY_CARD_INTO_PILE\";\nexport function playCardIntoPile(card: CardState, pile: string) {\n  return {\n    type: PLAY_CARD_INTO_PILE,\n    card,\n    pile,\n  };\n}\n","import { CardState } from \"./CardState\";\n\nlet lastFakeId = 1;\n\nexport const REPLACE_CARDS = \"cards/REPLACE_CARDS\";\nexport function replaceCards(cards: CardState[]) {\n  return {\n    type: REPLACE_CARDS,\n    cards: cards.map((c) => ({ ...c, id: lastFakeId++ })),\n  };\n}\n","import { CardsState, CardState } from \"../cards\";\nimport { SelectedCardState } from \"./SelectedCardState\";\n\nexport function getSelectedCard(\n  state: SelectedCardState & CardsState\n): CardState | null {\n  const card = state.selectedCard.card;\n  return card || null;\n}\n","export const PLAY_SELECTED_CARD = \"selectedCard/PLAY_SELECTED_CARD\";\nexport function playSelectedCard(pile: string) {\n  return {\n    type: PLAY_SELECTED_CARD,\n    pile,\n  };\n}\n","import { CardState } from \"../cards\";\n\nexport const SELECT_CARD = \"selectedCard/SELECT_CARD\";\nexport function selectCard(card: CardState) {\n  return {\n    type: SELECT_CARD,\n    card,\n  };\n}\n","import { GameState } from \"./GameState\";\n\nexport function getGameRound(state: GameState): number {\n  return state.game?.round;\n}\n","import { GameState } from \"./GameState\";\n\nlet game: GameState[\"game\"] | null = null;\nlet result: string[] | null = null;\nexport function listPlayers(state: GameState): string[] | null {\n  if (state.game === game) return result;\n\n  game = state.game;\n  result = Object.keys(game.players);\n  return result;\n}\n","import { CardState } from \"./CardState\";\nimport { CardsState } from \"./CardsState\";\n\nconst EMPTY: CardState[] = [];\nexport function listPileCards(\n  state: CardsState,\n  { pile }: { pile: string }\n): CardState[] {\n  return state.cards.piles[pile]?.cards || EMPTY;\n}\n","import { CardsState } from \"./CardsState\";\nimport { CardState } from \"./CardState\";\n\nconst EMPTY: CardState[] = [];\nexport function listSquareCards(\n  state: CardsState,\n  { player, square }: { player: string; square: number }\n): CardState[] {\n  return state.cards.players[player].squares[square]?.cards || EMPTY;\n}\n","import { CardsState } from \"./CardsState\";\n\nfunction compare(a: any, b: any): number {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n}\n\nlet piles: any = null;\nlet result: any[] = [];\nexport function listPlays(state: CardsState): any[] {\n  if (state.cards.piles === piles) return result;\n  piles = state.cards.piles;\n\n  result = Object.values(state.cards.piles)\n    .flatMap((p) => p.cards)\n    .map((card) => {\n      const { id, ...play } = card;\n      return play;\n    })\n    .sort((a, b) => {\n      if (a.ownerName !== b.ownerName) return compare(a.ownerName, b.ownerName);\n      if (a.pile !== b.pile) return compare(a.pile, b.pile);\n      if (a.square !== b.square) return compare(a.square, b.square);\n      if (a.type !== b.type) return compare(a.type, b.type);\n      return compare(a.name, b.name);\n    });\n\n  return result;\n}\n","import { BlogState } from \"./BlogState\";\n\nexport function getCurrentPost(\n  state: BlogState\n): BlogState[\"blog\"][\"currentPost\"] {\n  return state.blog.currentPost;\n}\n","import { BlogState } from \"./BlogState\";\n\nexport function getPostList(state: BlogState): BlogState[\"blog\"][\"list\"] {\n  return state.blog.list;\n}\n","import { Action } from \"redux\";\nimport { set, merge } from \"object-path-immutable\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { REPLACE_GAME } from \"./replaceGame\";\nimport { GameState } from \"./GameState\";\nimport { NEW_GAME } from \"../newGame\";\n\nexport class GameDuck implements ReduxReducer {\n  reduce(state: GameState, action: Action & GameState & any): {} {\n    if (state.game === undefined) state = set(state, \"game\", null);\n\n    switch (action.type) {\n      case REPLACE_GAME: {\n        const { cards, ...newGame } = action.game as any;\n        return merge(state, \"game\", newGame);\n      }\n      case NEW_GAME: {\n        return { ...state, game: { gameName: action.body.gameName } };\n      }\n      default:\n        return state;\n    }\n  }\n}\n","import { ApiRest } from \"www/ApiRest\";\nimport { Injector } from \"www/injector\";\nimport { decrementLoading, incrementLoading } from \"../loading\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxStore } from \"../ReduxStore\";\nimport { setView } from \"../view\";\nimport { ENTER_GAME } from \"./enterGame\";\nimport { replaceGame } from \"./replaceGame\";\n\nexport class EnterGameDuck implements ReduxAfterAction {\n  private reduxStore: ReduxStore;\n  private apiRest: ApiRest;\n\n  constructor(injector: Injector) {\n    this.apiRest = injector.get(ApiRest);\n    this.reduxStore = injector.get(ReduxStore);\n  }\n\n  async afterAction(action: any) {\n    if (action.type !== ENTER_GAME) return;\n\n    this.reduxStore.dispatch(incrementLoading());\n    const game = await this.apiRest.get(\n      `/api/v1/games/${action.body.gameName}/players/${action.body.playerName}`\n    );\n\n    this.reduxStore.dispatch(replaceGame(game));\n    this.reduxStore.dispatch(setView({ root: \"Board\" }));\n    this.reduxStore.dispatch(decrementLoading());\n  }\n}\n","import { ApiRest } from \"www/ApiRest\";\nimport { Injector } from \"www/injector\";\nimport { listPlays } from \"../cards\";\nimport { getCurrentUser } from \"../currentUser\";\nimport { decrementLoading, incrementLoading } from \"../loading\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxStore } from \"../ReduxStore\";\nimport { setView } from \"../view\";\nimport { getGameName } from \"./getGameName\";\nimport { READY_GAME } from \"./readyGame\";\nimport { replaceGame } from \"./replaceGame\";\n\nexport class ReadyGameDuck implements ReduxAfterAction {\n  private reduxStore: ReduxStore;\n  private apiRest: ApiRest;\n\n  constructor(injector: Injector) {\n    this.apiRest = injector.get(ApiRest);\n    this.reduxStore = injector.get(ReduxStore);\n  }\n\n  async afterAction(action: any) {\n    if (action.type !== READY_GAME) return;\n\n    const gameName = this.reduxStore.select(getGameName);\n    const playerName = this.reduxStore.select(getCurrentUser);\n    const plays = this.reduxStore.select(listPlays);\n\n    this.reduxStore.dispatch(incrementLoading());\n    const game = await this.apiRest.put(\n      `/api/v1/games/${gameName}/players/${playerName}/ready`,\n      { cards: plays, playerName }\n    );\n\n    this.reduxStore.dispatch(replaceGame(game));\n    this.reduxStore.dispatch(setView({ root: \"Board\" }));\n    this.reduxStore.dispatch(decrementLoading());\n  }\n}\n","import { ApiRest } from \"www/ApiRest\";\nimport { Injector } from \"www/injector\";\nimport { getCurrentUser } from \"../currentUser\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxStore } from \"../ReduxStore\";\nimport { enterGame } from \"./enterGame\";\nimport { getGameName } from \"./getGameName\";\nimport { REFRESH_GAME } from \"./refreshGame\";\n\nexport class RefreshGameDuck implements ReduxAfterAction {\n  private reduxStore: ReduxStore;\n  private apiRest: ApiRest;\n\n  constructor(injector: Injector) {\n    this.apiRest = injector.get(ApiRest);\n    this.reduxStore = injector.get(ReduxStore);\n  }\n\n  async afterAction(action: any) {\n    if (action.type !== REFRESH_GAME) return;\n\n    const gameName = this.reduxStore.select(getGameName);\n    const playerName = this.reduxStore.select(getCurrentUser);\n\n    this.reduxStore.dispatch(enterGame({ gameName, playerName }));\n  }\n}\n","import { ApiRest } from \"www/ApiRest\";\nimport { Injector } from \"www/injector\";\nimport { replaceCards } from \"../cards\";\nimport { replaceCurrentUser } from \"../currentUser\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxStore } from \"../ReduxStore\";\nimport { REPLACE_GAME } from \"./replaceGame\";\n\nexport class ReplaceGameDuck implements ReduxAfterAction {\n  private reduxStore: ReduxStore;\n  private apiRest: ApiRest;\n\n  constructor(injector: Injector) {\n    this.apiRest = injector.get(ApiRest);\n    this.reduxStore = injector.get(ReduxStore);\n  }\n\n  async afterAction(action: any) {\n    if (action.type !== REPLACE_GAME) return;\n    const game = action.game;\n\n    this.reduxStore.dispatch(replaceCurrentUser(game.currentPlayerName));\n    this.reduxStore.dispatch(replaceCards(game.cards));\n  }\n}\n","import { Injector } from \"www/injector\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { GameDuck } from \"./GameDuck\";\nimport { EnterGameDuck } from \"./EnterGameDuck\";\nimport { ReadyGameDuck } from \"./ReadyGameDuck\";\nimport { RefreshGameDuck } from \"./RefreshGameDuck\";\nimport { ReplaceGameDuck } from \"./ReplaceGameDuck\";\n\nexport default function configureDucksGameInjector(injector: Injector) {\n  injector.register(ReduxReducer, GameDuck);\n  injector.register(ReduxAfterAction, EnterGameDuck);\n  injector.register(ReduxAfterAction, ReadyGameDuck);\n  injector.register(ReduxAfterAction, RefreshGameDuck);\n  injector.register(ReduxAfterAction, ReplaceGameDuck);\n}\n","import { Action } from \"redux\";\nimport { set } from \"object-path-immutable\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { DESELECT_CARD } from \"./deselectCard\";\nimport { SELECT_CARD } from \"./selectCard\";\nimport { SelectedCardState } from \"./SelectedCardState\";\n\nexport class SelectedCardDuck implements ReduxReducer {\n  reduce(state: SelectedCardState, action: Action & any): {} {\n    if (!state.selectedCard) state = set(state, \"selectedCard\", { card: null });\n\n    switch (action.type) {\n      case SELECT_CARD:\n        return set(state, \"selectedCard.card\", action.card);\n      case DESELECT_CARD:\n        return set(state, \"selectedCard.card\", null);\n      default:\n        return state;\n    }\n  }\n}\n","import { Injector } from \"www/injector\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxStore } from \"../ReduxStore\";\nimport { getSelectedCard } from \"./getSelectedCard\";\nimport { PLAY_SELECTED_CARD } from \"./playSelectedCard\";\nimport { playCardIntoPile } from \"../cards\";\nimport { deselectCard } from \"./deselectCard\";\n\nexport class PlaySelectedCardDuck implements ReduxAfterAction {\n  private reduxStore: ReduxStore;\n\n  constructor(injector: Injector) {\n    this.reduxStore = injector.get(ReduxStore);\n  }\n\n  async afterAction(action: any) {\n    if (action.type !== PLAY_SELECTED_CARD) return;\n\n    const card = this.reduxStore.select(getSelectedCard) as any;\n    this.reduxStore.dispatch(deselectCard());\n    this.reduxStore.dispatch(playCardIntoPile(card, action.pile));\n  }\n}\n","import { Injector } from \"www/injector\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { SelectedCardDuck } from \"./SelectedCardDuck\";\nimport { PlaySelectedCardDuck } from \"./PlaySelectedCardDuck\";\n\nexport default function configureDucksSelectedCardInjector(injector: Injector) {\n  injector.register(ReduxReducer, SelectedCardDuck);\n  injector.register(ReduxAfterAction, PlaySelectedCardDuck);\n}\n","import { Action } from \"redux\";\nimport { set } from \"object-path-immutable\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { BlogState } from \"./BlogState\";\nimport { REPLACE_CURRENT_POST } from \"./replaceCurrentPost\";\nimport { REPLACE_POST_LIST } from \"./replacePostList\";\n\nexport class BlogDuck implements ReduxReducer {\n  reduce(state: BlogState, action: Action & any): {} {\n    if (!state.blog)\n      state = set(state, \"blog\", { list: [], currentPost: null });\n\n    switch (action.type) {\n      case REPLACE_CURRENT_POST:\n        return set(state, \"blog.currentPost\", action.currentPost);\n      case REPLACE_POST_LIST:\n        return set(state, \"blog.list\", action.list);\n      default:\n        return state;\n    }\n  }\n}\n","import { ApiRest } from \"www/ApiRest\";\nimport { Injector } from \"www/injector\";\nimport { decrementLoading, incrementLoading } from \"../loading\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxStore } from \"../ReduxStore\";\nimport { SET_VIEW } from \"../view\";\nimport { replaceCurrentPost } from \"./replaceCurrentPost\";\nimport { replacePostList } from \"./replacePostList\";\n\nexport class BlogSetViewDuck implements ReduxAfterAction {\n  private reduxStore: ReduxStore;\n  private apiRest: ApiRest;\n\n  constructor(injector: Injector) {\n    this.apiRest = injector.get(ApiRest);\n    this.reduxStore = injector.get(ReduxStore);\n  }\n\n  async afterAction(action: any) {\n    if (action.type !== SET_VIEW) return;\n\n    switch (action.view.root) {\n      case \"Blog\":\n        await this.loadPostList();\n        break;\n      case \"BlogPost\":\n        await this.loadPost(action.view.postId);\n        break;\n      default:\n      // do nothing\n    }\n  }\n\n  async loadPostList() {\n    this.reduxStore.dispatch(incrementLoading());\n    const { list } = await this.apiRest.get(`/api/v1/posts`);\n    this.reduxStore.dispatch(replacePostList(list));\n    this.reduxStore.dispatch(decrementLoading());\n  }\n\n  async loadPost(postId: string) {\n    this.reduxStore.dispatch(incrementLoading());\n    const post = await this.apiRest.get(`/api/v1/posts/${postId}`);\n    this.reduxStore.dispatch(replaceCurrentPost(post));\n    this.reduxStore.dispatch(decrementLoading());\n  }\n}\n","import { Injector } from \"www/injector\";\nimport { ReduxAfterAction } from \"../ReduxAfterAction\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { BlogDuck } from \"./BlogDuck\";\nimport { BlogSetViewDuck } from \"./BlogSetViewDuck\";\n\nexport default function configureDucksViewInjector(injector: Injector) {\n  injector.register(ReduxReducer, BlogDuck);\n  injector.register(ReduxAfterAction, BlogSetViewDuck);\n}\n","import { Action } from \"redux\";\nimport { set, wrap } from \"object-path-immutable\";\nimport { push as mutatePush } from \"object-path\";\nimport { ReduxReducer } from \"../ReduxReducer\";\nimport { GameState } from \"../game/GameState\";\nimport { CardsState } from \"./CardsState\";\nimport { CardState } from \"./CardState\";\nimport { REPLACE_CARDS } from \"./replaceCards\";\nimport { PLAY_CARD_INTO_PILE } from \"./playCardIntoPile\";\n\nexport class CardsDuck implements ReduxReducer {\n  reduce(state: GameState & CardsState, action: Action & any): {} {\n    if (state.cards == null) state = set(state, \"cards\", null);\n\n    switch (action.type) {\n      case REPLACE_CARDS:\n        return set(\n          state,\n          \"cards\",\n          computeCards(action.cards, state.game.currentPlayerName)\n        );\n      case PLAY_CARD_INTO_PILE:\n        return reducePlayCardIntoPile(state, action.card, action.pile);\n      default:\n        return state;\n    }\n  }\n}\n\nfunction reducePlayCardIntoPile(\n  state: CardsState,\n  card: CardState,\n  pile: string\n) {\n  const oldCard = card;\n  const newCard = { ...oldCard, pile };\n\n  const oldPath = [\"cards\", ...getCardPath(oldCard, card.ownerName)];\n  const newPath = [\"cards\", ...getCardPath(newCard, card.ownerName)];\n\n  return wrap(state)\n    .update(oldPath, (arr) => arr.filter((c: CardState) => c !== oldCard))\n    .update(newPath, (arr = []) => [...arr, newCard])\n    .value();\n}\n\nfunction computeCards(cards: CardState[], currentUser: string) {\n  const result: CardsState[\"cards\"] = { players: {}, piles: {} };\n  cards.forEach((c) => assignCard(c, currentUser, result));\n  return result;\n}\n\nfunction assignCard(\n  card: CardState,\n  currentUser: string,\n  result: CardsState[\"cards\"]\n) {\n  const { ownerName } = card;\n  if (!ownerName) return;\n\n  const path = getCardPath(card, currentUser);\n  mutatePush(result, path, card);\n}\n\nfunction getCardPath(card: CardState, currentUser: string) {\n  const { ownerName, square, pile } = card;\n  return card.pile && card.ownerName === currentUser\n    ? [\"piles\", pile, \"cards\"]\n    : [\"players\", ownerName, \"squares\", +square, \"cards\"];\n}\n","import { Injector } from \"www/injector\";\nimport { CardsDuck } from \"./CardsDuck\";\nimport { ReduxReducer } from \"../ReduxReducer\";\n\nexport default function configureDucksViewInjector(injector: Injector) {\n  injector.register(ReduxReducer, CardsDuck);\n}\n","export class Injector {\n  private symbols: Map<any, any[]> = new Map();\n  private instances: Map<any, any> = new Map();\n  private values: Map<any, any> = new Map();\n\n  register<T>(\n    Type: new (injector: Injector) => T,\n    Constructor?: new (injector: Injector) => T\n  ) {\n    if (!this.symbols.has(Type)) {\n      this.symbols.set(Type, []);\n    }\n\n    this.symbols.get(Type)?.push(Constructor || Type);\n  }\n\n  set<T>(Type: new (...x: any[]) => T, value: T) {\n    this.values.set(Type, value);\n  }\n\n  get<T>(Type: new (...x: any[]) => T): T {\n    if (!this.values.has(Type)) {\n      const list = this.symbols.get(Type);\n      if (!list)\n        throw new Error(\n          `No ${Type.name} registered in the injector. Please, make sure that you register it or you have configured its package.`\n        );\n\n      const Constructor = list[list.length - 1];\n      const value = this.instance(Constructor);\n      this.values.set(Type, value);\n    }\n\n    return this.values.get(Type);\n  }\n\n  list<T>(Type: new (...x: any[]) => T): T[] {\n    if (!this.values.has(Type)) {\n      const list = this.symbols.get(Type) || [];\n      const values = list.map((C) => this.instance(C));\n      this.values.set(Type, values);\n    }\n\n    return this.values.get(Type);\n  }\n\n  configure(configurer: (injector: Injector) => void): Injector {\n    configurer(this);\n    return this;\n  }\n\n  private instance<T>(Constructor: new (...x: any[]) => T): T {\n    if (!this.instances.has(Constructor)) {\n      const value = new Constructor(this);\n      this.instances.set(Constructor, value);\n    }\n\n    return this.instances.get(Constructor);\n  }\n}\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { css } from \"emotion\";\nimport { CardState } from \"www/ducks/cards\";\nimport { selectCard } from \"www/ducks/selectedCard\";\n\nconst typeColors = {\n  food: \"#EF5FA7\",\n  knight: \"#EF5FA7\",\n  field: \"#F8BA00\",\n  event: \"#00A2FF\",\n} as any;\n\nconst typeIcons = {\n  food: \"🍲\",\n  knight: \"💂\",\n  field: \"🏠\",\n  event: \"⚡\",\n} as any;\n\nconst nameIcons = {\n  f1: \"🍲\",\n  k1: \"💂\",\n  field: \"🏠\",\n  event: \"⚡\",\n  forest: \"🌲\",\n  grain: \"🌾\",\n  sheep: \"🐑\",\n} as any;\n\nconst cardClassName = css`\n  background: red;\n  height: 6rem;\n  width: 4.5rem;\n  border-radius: 10%;\n  margin-right: -3rem;\n  position: relative;\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  border: solid black 1px;\n\n  &:hover {\n    z-index: 1000;\n  }\n\n  .type {\n    position: absolute;\n    top: 0.1rem;\n    right: 0.1rem;\n  }\n\n  .name {\n    font-size: 4rem;\n  }\n`;\n\nexport function Card({ card }: { card: CardState }) {\n  const dispatch = useDispatch();\n  const select = () => dispatch(selectCard(card));\n\n  return (\n    <div\n      className={cardClassName}\n      data-testid={`card-${card.type}`}\n      data-name={card.name}\n      onClick={select}\n      style={{ background: typeColors[card.type] }}\n    >\n      <div className=\"type\">{typeIcons[card.type]}</div>\n      <div className=\"name\">{nameIcons[card.name]}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { CardState } from \"www/ducks/cards\";\nimport { Card } from \"./Card\";\n\nexport function Cards({ cards }: { cards: CardState[] }) {\n  return (\n    <>\n      {cards.map((card) => (\n        <Card card={card} key={card.id} />\n      ))}\n    </>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { css } from \"emotion\";\nimport { listSquareCards } from \"www/ducks/cards\";\nimport { Cards } from \"./Cards\";\n\nconst handClassName = css`\n  background: blanchedalmond;\n  display: inline-block;\n  height: 6rem;\n  width: 40rem;\n  box-sizing: border-box;\n  color: white;\n  border: solid white 1px;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport function Hand({ player }: { player: string }) {\n  const cards = useSelector((s: any) =>\n    listSquareCards(s, { player, square: 0 })\n  );\n\n  return (\n    <div className={handClassName} data-testid={`${player}-hand`}>\n      <Cards cards={cards} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { css } from \"emotion\";\nimport { listPileCards } from \"www/ducks/cards\";\nimport { playSelectedCard } from \"www/ducks/selectedCard\";\nimport { Cards } from \"./Cards\";\n\nconst pileClassName = css`\n  background: blueviolet;\n  display: inline-block;\n  height: 3rem;\n  width: 8rem;\n  box-sizing: border-box;\n  color: white;\n  border: solid white 1px;\n  text-align: center;\n  overflow: hidden;\n  white-space: nowrap;\n  cursor: pointer;\n`;\n\nexport function Pile({ name }: { name: string }) {\n  const dispatch = useDispatch();\n  const cards = useSelector((s: any) => listPileCards(s, { pile: name }));\n  const pile = () => dispatch(playSelectedCard(name));\n\n  return (\n    <div className={pileClassName} data-testid={`pile-${name}`} onClick={pile}>\n      {name}\n      <Cards cards={cards} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { css } from \"emotion\";\nimport { listSquareCards } from \"www/ducks/cards\";\nimport { Cards } from \"./Cards\";\nimport { Pile } from \"./Pile\";\n\nconst squareClassName = css`\n  background: burlywood;\n  display: inline-block;\n  height: 10rem;\n  width: 8rem;\n  box-sizing: border-box;\n  color: white;\n  border: solid white 1px;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport function Square({ player, square }: { player: string; square: number }) {\n  const cards = useSelector((s: any) => listSquareCards(s, { player, square }));\n\n  return (\n    <div className={squareClassName} data-testid={`${player}-square-${square}`}>\n      <Pile name={`${player}-square-${square}`} />\n      <br />\n      <Cards cards={cards} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Square } from \"./Square\";\n\nexport function Squares({ player }: { player: string }) {\n  return (\n    <div>\n      <Square player={player} square={1} />\n      <Square player={player} square={2} />\n      <Square player={player} square={3} />\n      <Square player={player} square={4} />\n      <Square player={player} square={5} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { listPlayers } from \"www/ducks/game\";\nimport { Hand } from \"./Hand\";\nimport { Pile } from \"./Pile\";\nimport { Squares } from \"./Squares\";\n\nfunction PlayerView({ player }: { player: string }) {\n  return (\n    <>\n      <h3>Player: {player}</h3>\n      <Squares player={player} key={player} />\n      <Hand player={player} />\n      <br />\n    </>\n  );\n}\n\nexport function BoardView() {\n  const players = useSelector(listPlayers);\n  if (players === null) return null;\n\n  return (\n    <div>\n      <br />\n      <Pile name=\"event\" />\n      <Pile name=\"buy-field\" />\n      <Pile name=\"buy-knight\" />\n      <hr />\n      {players.map((player) => (\n        <PlayerView player={player} key={player} />\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { css } from \"emotion\";\n\nconst formClassName = css`\n  margin: 2rem auto;\n  max-width: 30rem;\n  font-size: 1.33rem;\n\n  input,\n  select {\n    font-size: 1.33rem;\n    background: rgba(255, 255, 255, 0.1);\n    border: none;\n    color: white;\n    border-bottom: solid white 0.1rem;\n    height: 1.5rem;\n    width: 100%;\n    margin: 0.5rem 0 1.33rem;\n  }\n`;\n\nexport function Form({ onSubmit, children }: any) {\n  return (\n    <form className={formClassName} onSubmit={onSubmit}>\n      {children}\n    </form>\n  );\n}\n","import React, { forwardRef } from \"react\";\n\nexport const InputText = forwardRef(function InputText(\n  { name, label }: { name?: string; label: string },\n  ref: any\n) {\n  return (\n    <div>\n      <label>\n        {label}\n        <br />\n        <input name={name} ref={ref} />\n      </label>\n    </div>\n  );\n});\n","import React, { forwardRef } from \"react\";\n\nexport const Select = forwardRef(function Select(\n  { name, label, values }: { name?: string; label: string; values: string[] },\n  ref: any\n) {\n  return (\n    <div>\n      <label>\n        {label}\n        <br />\n        <select name={name} ref={ref}>\n          {values.map((v) => (\n            <option value={v} key={v}>\n              {v}\n            </option>\n          ))}\n        </select>\n      </label>\n    </div>\n  );\n});\n","import React, { useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { enterGame } from \"www/ducks/game\";\nimport { InputText, Form } from \"../form\";\n\nexport function EnterGameForm() {\n  const dispatch = useDispatch();\n  const gameName: any = useRef();\n  const playerName: any = useRef();\n\n  const submit = (e: React.SyntheticEvent<EventTarget>) => {\n    e.preventDefault();\n\n    dispatch(\n      enterGame({\n        gameName: gameName.current.value,\n        playerName: playerName.current.value,\n      })\n    );\n  };\n\n  return (\n    <Form onSubmit={submit}>\n      <InputText ref={gameName} label=\"New game name:\" />\n      <InputText ref={playerName} label=\"Player name:\" />\n\n      <button type=\"submit\">Enter</button>\n    </Form>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ReactMarkdown from \"react-markdown\";\nimport { css } from \"emotion\";\nimport { getCurrentPost } from \"www/ducks/blog\";\n\nconst postClassName = css`\n  background: #ddd;\n  color: rgba(0, 0, 0, 0.8);\n  padding: 1.5rem;\n  max-width: 40rem;\n  margin: 3em auto;\n  background: linear-gradient(\n    45deg,\n    rgba(242, 246, 248, 1) 0%,\n    rgba(216, 225, 231, 1) 50%,\n    rgba(181, 198, 208, 1) 51%,\n    rgba(224, 239, 249, 1) 100%\n  );\n  p {\n    max-width: 30rem;\n  }\n  h1 {\n    margin-top: 0;\n    font-size: 5rem;\n    color: #000;\n  }\n  h1 + p {\n    font-size: 2rem;\n    color: rgba(0, 0, 0, 0.5);\n    max-width: none;\n    line-height: 1.1;\n    font-weight: 300;\n  }\n  h2 {\n    font-size: 3rem;\n    margin-top: 3rem;\n    border-bottom: solid 0.1em rgba(0, 0, 0, 0.8);\n    text-transform: uppercase;\n  }\n  h3 {\n    font-size: 2rem;\n    margin-top: 2rem;\n  }\n  blockquote {\n    background: black;\n    background: linear-gradient(\n      45deg,\n      rgba(76, 76, 76, 1) 0%,\n      rgba(89, 89, 89, 1) 12%,\n      rgba(102, 102, 102, 1) 25%,\n      rgba(71, 71, 71, 1) 39%,\n      rgba(44, 44, 44, 1) 50%,\n      rgba(0, 0, 0, 1) 51%,\n      rgba(17, 17, 17, 1) 60%,\n      rgba(43, 43, 43, 1) 76%,\n      rgba(28, 28, 28, 1) 91%,\n      rgba(19, 19, 19, 1) 100%\n    );\n    border-radius: 0.25rem;\n    color: rgba(255, 255, 255, 0.8);\n    border: none;\n    padding: 0.75rem 1.5rem;\n    max-width: 33rem;\n  }\n  blockquote p:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport function BlogPostView() {\n  const post = useSelector(getCurrentPost);\n\n  if (!post) return null;\n\n  return (\n    <article className={postClassName}>\n      <ReactMarkdown source={post.body} escapeHtml={false} />\n    </article>\n  );\n}\n","import React, { useState, useRef, createRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { newGame } from \"www/ducks/newGame\";\nimport { InputText, Select, Form } from \"../form\";\n\nexport function NewGameForm() {\n  const dispatch = useDispatch();\n  const gameName: any = useRef();\n  const scenario: any = useRef();\n  const [players, setPlayers] = useState([createRef()]);\n  const addPlayer = (e: React.SyntheticEvent<EventTarget>) => {\n    e.preventDefault();\n    setPlayers((p) => [...p, createRef()]);\n  };\n\n  const submit = (e: React.SyntheticEvent<EventTarget>) => {\n    e.preventDefault();\n\n    dispatch(\n      newGame({\n        gameName: gameName.current.value,\n        scenario: scenario.current.value,\n        players: players.map((p: any) => ({ name: p.current.value })),\n      })\n    );\n  };\n\n  return (\n    <Form onSubmit={submit}>\n      <InputText ref={gameName} label=\"New game name:\" />\n      <Select\n        ref={scenario}\n        name=\"scenario\"\n        label=\"Game scenario:\"\n        values={[\"Basic\"]}\n      />\n      {players.map((p, idx) => (\n        <InputText ref={p} label={`Player ${idx + 1} name:`} key={idx} />\n      ))}\n      <button onClick={addPlayer}>Add player</button>\n      <button type=\"submit\">Create Game</button>\n    </Form>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getView } from \"www/ducks/view\";\n\nexport function UnknownView() {\n  const view = useSelector(getView);\n  return (\n    <div>\n      Unkown View\n      <br />\n      Please check that you have configured correctly view in the\n      components/views/CurrentView.tsx component.\n      <pre>{JSON.stringify(view)}</pre>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getView } from \"www/ducks/view\";\nimport { BlogView, BlogPostView } from \"../blog\";\nimport { BoardView } from \"../board/BoardView\";\nimport { NewGameView } from \"../newGame/NewGameView\";\nimport { EnterGameView } from \"../enterGame/EnterGameView\";\nimport { MainView } from \"./MainView\";\nimport { UnknownView } from \"./UnknownView\";\n\nconst Views = {\n  BoardView,\n  EnterGameView,\n  MainView,\n  NewGameView,\n  BlogView,\n  BlogPostView,\n} as { [name: string]: typeof MainView };\n\nexport function CurrentView() {\n  const root = useSelector((state) => getView(state).root);\n  const View = Views[root + \"View\"] || UnknownView;\n\n  return <View />;\n}\n","import React from \"react\";\nimport { EnterGameForm } from \"./EnterGameForm\";\n\nexport function EnterGameView() {\n  return <EnterGameForm />;\n}\n","import React from \"react\";\n\nexport function MainView() {\n  return <div>Main View</div>;\n}\n","import React from \"react\";\nimport { NewGameForm } from \"./NewGameForm\";\n\nexport function NewGameView() {\n  return <NewGameForm />;\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getPostList } from \"www/ducks/blog\";\nimport { setView } from \"www/ducks/view\";\n\nexport function BlogView() {\n  const dispatch = useDispatch();\n  const list = useSelector(getPostList);\n  const go = (postId: string) =>\n    dispatch(setView({ root: \"BlogPost\", postId }));\n\n  if (!list) return null;\n\n  return (\n    <ul>\n      {list.map((post) => (\n        <li key={post.id} onClick={() => go(post.id)}>\n          <span role=\"button\">{post.title}</span> »\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { css } from \"emotion\";\nimport { getCurrentUser } from \"www/ducks/currentUser\";\nimport { readyGame, refreshGame } from \"www/ducks/game\";\nimport { getGameRound } from \"www/ducks/game\";\nimport { isLoading } from \"www/ducks/loading\";\nimport { setView } from \"www/ducks/view\";\n\nconst headerClassName = css`\n  background: white;\n  color: black;\n  padding: 0.5rem 1rem;\n  display: flex;\n  height: 2.5rem;\n\n  .title {\n    font-size: 2rem;\n  }\n\n  .space {\n    width: 2rem;\n  }\n\n  .fill {\n    flex: 1;\n  }\n\n  .rotate {\n    animation: rotate 1s infinite linear;\n    margin-top: 0.5rem;\n    font-size: 2rem;\n    line-height: 2rem;\n  }\n\n  button {\n    background: transparent;\n    cursor: pointer;\n    border: none;\n    padding: 0 0.67rem;\n  }\n  button:hover {\n    background: #ddd;\n  }\n\n  @keyframes rotate {\n    from {\n      transform: translate(0, -0.2rem) rotate(0deg);\n    }\n    to {\n      transform: translate(0, -0.2rem) rotate(360deg);\n    }\n  }\n`;\n\nconst Title = ({ children }: any) => <span className=\"title\">{children}</span>;\nconst Space = () => <div className=\"space\" />;\nconst Fill = () => <div className=\"fill\" />;\nconst Spinner = () => (\n  <span className=\"rotate\" data-testid=\"loading\">\n    ߷\n  </span>\n);\n\nexport function MainHeader() {\n  const dispatch = useDispatch();\n  const playerName = useSelector(getCurrentUser);\n  const round = useSelector(getGameRound);\n  const loading = useSelector(isLoading);\n  const newGame = () => dispatch(setView({ root: \"NewGame\" }));\n  const enterGame = () => dispatch(setView({ root: \"EnterGame\" }));\n  const goToBlog = () => dispatch(setView({ root: \"Blog\" }));\n  const ready = () => dispatch(readyGame());\n  const refresh = () => dispatch(refreshGame());\n\n  return (\n    <header className={headerClassName}>\n      <Title>CardGame 🀪</Title>\n      <Space />\n      <button onClick={newGame}>New Game</button>\n      <button onClick={enterGame}>Enter Game</button>\n      <button onClick={goToBlog}>Blog</button>\n      <Space />\n      {playerName && (\n        <span data-testid=\"current-player-name\">{playerName}</span>\n      )}\n      {round && <span data-testid=\"current-round\"> R:{round}</span>}\n      <Space />\n      <button onClick={ready}>Ready</button>\n      <button onClick={refresh}>Refresh</button>\n      <Fill />\n      {loading && <Spinner />}\n    </header>\n  );\n}\n","import React from \"react\";\nimport { CurrentView } from \"../views/CurrentView\";\nimport { MainHeader } from \"./MainHeader\";\n\nexport function MainLayout() {\n  return (\n    <div>\n      <MainHeader />\n      <CurrentView />\n    </div>\n  );\n}\n","import { Injector } from \"www/injector\";\nimport { ReduxStore } from \"./ReduxStore\";\nimport configureBlogInjector from \"./blog\";\nimport configureCardsInjector from \"./cards\";\nimport configureCurrentUserInjector from \"./currentUser\";\nimport configureGameInjector from \"./game\";\nimport configureLoadingInjector from \"./loading\";\nimport configureNewGameInjector from \"./newGame\";\nimport configureSelectedCardInjector from \"./selectedCard\";\nimport configureViewInjector from \"./view\";\n\nexport default function configureDucksnjector(injector: Injector) {\n  injector.configure(configureBlogInjector);\n  injector.configure(configureCardsInjector);\n  injector.configure(configureCurrentUserInjector);\n  injector.configure(configureGameInjector);\n  injector.configure(configureLoadingInjector);\n  injector.configure(configureNewGameInjector);\n  injector.configure(configureSelectedCardInjector);\n  injector.configure(configureViewInjector);\n\n  injector.register(ReduxStore);\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Injector } from \"www/injector\";\nimport { MainLayout } from \"./components\";\nimport { ReduxStore } from \"./ducks\";\n\nexport class AppRenderer {\n  private reduxStore: ReduxStore;\n\n  constructor(injector: Injector) {\n    this.reduxStore = injector.get(ReduxStore);\n  }\n\n  render() {\n    const store = this.reduxStore.getStore();\n\n    return (\n      <Provider store={store}>\n        <div>\n          <MainLayout />\n        </div>\n      </Provider>\n    );\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport { Injector } from \"./injector\";\nimport configureAppInjector from \"./configureInjector\";\nimport { AppRenderer } from \"./AppRenderer\";\n\nexport * from \"./ducks\";\nexport * from \"./ApiRest\";\nexport * from \"./AppRenderer\";\n\nconst injector = new Injector().configure(configureAppInjector);\nconst renderedApp = injector.get(AppRenderer).render();\n\nReactDOM.render(renderedApp, document.getElementById(\"root\"));\n","import { Injector } from \"www/injector\";\nimport { ApiRest } from \"./ApiRest\";\nimport { AppRenderer } from \"./AppRenderer\";\nimport configureDucksInjector from \"./ducks\";\n\nexport default function configureWwwInjector(injector: Injector) {\n  injector.configure(configureDucksInjector);\n\n  injector.register(ApiRest);\n  injector.register(AppRenderer);\n}\n"],"sourceRoot":""}